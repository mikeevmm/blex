\NeedsTeXFormat{LaTeX2e}
\RequirePackage{expl3}
\ProvidesExplPackage{blex}{2023/01/27}{0.0.0}{Lambda calculus in LaTeX3}

% Blex BNF grammar:
% Some of the function documentation below refers to this grammar.
% To avoid repetition, it is presented only here.
%
% <lambda>         ::= <identifier> <group> 
%                    | <identifier> '.' <lambda>
% <whitespace>     ::= \q_blex_userspace*
% <variable name>  ::= <whitespace> [a-zA-Z\_][0-9a-zA-Z\_]* <whitespace>
% <group>          ::= '(' <whitespace> <expression> <whitespace> ')'
% <expression>     ::= <item>+
% <item>           ::= <group>
%                    | <identifier>
%                    | <other>

% Error messages
\msg_new:nnnn {blex} {bad_var_name}
    {Invalid\ variable\ name\ .#1.\ \\ \msg_line_context:}
    {Variable\ names\ must\ consist\ of\ a\ latin\ character\ or\ underscore,
     followed\ by\ any\ number\ of\ latin\ characters,\ digits,\ or\ underscores.}

% Constants
\quark_new:N \q_blex_userspace
\quark_new:N \q_blex_eof

% Functions

\cs_new:Npn \__blex_dehydrate:VN #1 #2 {
    % Dehydrate
    %
    % Takes a token list in #2, meant to be a sequence of tokens given by the user,
    % and converts literal (unescaped, catcode 10) spaces into the \q_blex_userspace
    % quark. The result is put in token list #1.
    %
    % See also \__blex_hydrate:NV.
    \exp_args:NNno \tl_set_rescan:Nnn
        #1
        { \char_set_catcode_letter:n{ 32 } }
        { #2 }
    \exp_args:NNx \tl_replace_all:Nnn
        #1
        { \char_generate:nn{32}{11} }
        { \q_blex_userspace }
}

\cs_new:Npn \__blex_hydrate:VN #1 #2 {
    % Hydrate
    %
    % Takes a token list in #2, meant to be a sequence of tokens obtained by dehydration,
    % and converts the \q_blex_userspace quark back into (unescaped, catcode 10) spaces.
    % The result is put into token list #1.
    %
    % See also \__blex_dehydrate:NV.
    \exp_args:NNo \tl_set:Nn #2 {#2}
    \exp_args:NNnx \tl_replace_all:Nnn
        #1
        { \q_blex_userspace }
        { \char_generate:nn{32}{10} }
}

\cs_new:Npn \__blex_expression:N #1 {
    % Expression
    %
    % Scans a lambda expression, that is a <lambda> as defined by the
    % BNF grammar.
    % Places the scanned sequence into the token list #1.
}

\cs_new:Npn \__blex_lambda: {
    % Lambda
    %
    % Control sequence corresponding to Î» in a LambdaCalc environment.
    % Scans a lambda expression and defines a new control sequence (call it \lambda:n).
    % \lambda:n takes a sequence of tokens and attempts to parse a <group> expression,
    % as defined in the BNF grammar. Then, it performs textual substitution on the body
    % of the lambda, replacing the lambda's identifier with this sequence of tokens.
    
    % TODO
}

\cs_new:Npn \__blex_initialize {
    % Initialize
    %
    % This function is called upon enetring a new LambdaCalc environment, after the user
    % input is dehydrated (see \__blex_dehydrate:NV).
    
    \DeclareUnicodeCharacter{03BB}{\__blex_expression:}
}

\cs_new:Npn \__blex_understand:NV #1 #2 {
    % Understand
    %
    % This function takes a dehydrated set of tokens (see \__blex_dehydrate:NV), and
    % expands occurrences of \__blex_lambda: until none are present.
    %
    % The expanded output is placed in the token list given as argument #1.
    % The input is given in argument #2.

    % TODO
}

% User interface

\NewDocumentEnvironment{LambdaCalc}{+b}{
    \tl_set:Nn \l_tmpa_tl {#1}
    \__blex_dehydrate:NV \l_tmpb_tl \l_tmpa_tl
    \__blex_initialize:

    % Add a quark signaling EOF so that scanning functions can manage unclosed groups.
    \tl_put_right:Nn \l_tmpb_tl {\q_blex_eof}

    % Resolve lambdas.
    \__blex_understand:NV \l_tmpa_tl \l_tmpb_tl

    % Rehydrate result, and interpret it as LaTeX.
    \__blex_hydrate:NV \l_tmpb_tl \l_tmpa_tl
    \l_tmpb_tl
}{}
